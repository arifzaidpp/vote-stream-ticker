# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BoothDto {
  boothNumber: Float!
  voterCount: Float!
}

type BoothResponse {
  boothNumber: Float!
  id: String!
  totalVotesCounted: Float!
  voterCount: Float!
}

input CandidateDto {
  name: String!
  photo: String
  position: String!
}

type CandidateResponse {
  id: String!
  name: String!
  photo: String
  position: String!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreateElectionDto {
  accessCode: String
  booths: [BoothDto!]!
  logo: String!
  name: String!
  parties: [PartyDto!]!
  status: String!
  totalVoters: Float!
}

input CreateUserDto {
  email: String!
  password: String!
  profile: UserProfileInput
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input ElectionFilter {
  createdAt: DateTime
  isActive: Boolean
  name: String
  updatedAt: DateTime
}

type ElectionPaginated {
  hasMore: Boolean!
  items: [ElectionResponse!]!
  total: Float!
}

type ElectionResponse {
  accessCode: String!
  booths: [BoothResponse!]!
  createdAt: DateTime!
  id: String!
  logo: String
  name: String!
  parties: [PartyResponse!]!
  status: String!
  totalVoters: Float!
  updatedAt: DateTime!
  votingCompletion: Float!
}

input ForgotPasswordDto {
  email: String!
}

input LoginDto {
  email: String!
  password: String!
}

type LoginResponse {
  token: String!
  user: User!
}

type Mutation {
  changePassword(input: ChangePasswordInput!): SuccessResponse!
  createElection(input: CreateElectionDto!): ElectionResponse!
  deleteElection(id: String!): ElectionResponse!
  deleteElections(ids: [String!]!): SuccessResponse!
  login(input: LoginDto!): LoginResponse!
  logout: SuccessResponse!
  register(input: CreateUserDto!): SuccessResponse!
  requestPasswordReset(input: ForgotPasswordDto!): SuccessResponse!
  resendVerificationEmail(email: String!): SuccessResponse!
  resetPassword(input: ResetPasswordDto!): SuccessResponse!
  setPasswordForOAuthUser(input: SetPasswordInput!): SuccessResponse!
  updateElection(input: UpdateElectionDto!): ElectionResponse!
  updateUserProfile(input: UpdateProfileInput!): User!
  verifyElectionAccessCode(accessCode: String!): SuccessResponse!
  verifyEmail(input: VerifyEmailDto!): VerifyEmailResponse!
}

input PaginationInput {
  skip: Int! = 0
  take: Int! = 10
}

input PaginationWithSearchInput {
  search: String
  skip: Int! = 0
  take: Int! = 10
}

input PartyDto {
  candidates: [CandidateDto!]!
  color: String!
  logo: String!
  name: String!
}

type PartyResponse {
  candidates: [CandidateResponse!]!
  color: String!
  id: String!
  logo: String
  name: String!
}

type Query {
  electionByAccessCode(accessCode: String!): ElectionResponse!
  electionById(id: String!): ElectionResponse!
  electionCount(filter: ElectionFilter): Int!
  elections(filters: ElectionFilter, pagination: PaginationWithSearchInput, sort: SortInput): ElectionPaginated!
  getHello: String!
  me: User!
  userById(id: Int!): User!
  users(pagination: PaginationInput): UserPaginated!
}

input ResetPasswordDto {
  password: String!
  token: String!
}

input SetPasswordInput {
  password: String!
}

"""Sort direction"""
enum SortDirection {
  ASC
  DESC
}

input SortInput {
  direction: SortDirection! = DESC
  field: String
}

type SuccessResponse {
  id: String
  message: String
  success: Boolean!
}

input UpdateBoothDto {
  boothNumber: Float
  id: String!
  voterCount: Float
}

input UpdateCandidateDto {
  id: String!
  name: String
  photo: String
  position: String
}

input UpdateElectionDto {
  accessCode: String
  booths: [UpdateBoothDto!]
  id: String!
  logo: String
  name: String
  parties: [UpdatePartyDto!]
  status: String
  totalVoters: Float
}

input UpdatePartyDto {
  candidates: [UpdateCandidateDto!]
  color: String
  id: String!
  logo: String
  name: String
}

input UpdateProfileInput {
  """URL to user avatar/profile image"""
  avatarUrl: String
  fullName: String
}

type User {
  createdAt: DateTime
  email: String
  googleId: String
  id: ID
  profile: UserProfile
  role: String
}

type UserPaginated {
  hasMore: Boolean!
  items: [User!]!
  total: Int!
}

type UserProfile {
  avatarUrl: String
  createdAt: DateTime
  fullName: String
  updatedAt: DateTime
  userId: ID
}

input UserProfileInput {
  """URL to user avatar/profile image"""
  avatarUrl: String
  fullName: String
}

input VerifyEmailDto {
  token: String!
}

type VerifyEmailResponse {
  id: String
  message: String
  success: Boolean!
  user: User!
}